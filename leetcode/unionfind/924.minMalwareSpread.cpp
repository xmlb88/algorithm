#include <iostream>
#include <vector>
#include <numeric>
using namespace std;

struct unionFind {
    vector<int> f, rank;
    
    unionFind(int n) : f(n), rank(n, 1) {
        iota(f.begin(), f.end(), 0);
    }

    int find(int x) {
        if (f[x] != x) {
            f[x] = find(f[x]);
        }
        return f[x];
    }

    void unionSet(int x, int y) {
        int fx = find(x), fy = find(y);
        if (fx == fy) return;
        if (rank[fx] < rank[fy]) {
            swap(fx, fy);
        }
        f[fy] = fx;
        rank[fx] += rank[fy];
    }
};

int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int n = graph.size();
    unionFind uf(n);

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (graph[i][j]) uf.unionSet(i, j);
        }
    }

    vector<int> infect(n);
    for (int i : initial) {
        infect[uf.find(i)]++;
    }

    sort(initial.begin(), initial.end());
    int maxN = 0, idx = initial[0];
    for (int i : initial) {
        int ri = uf.find(i);
        if (infect[ri] != 1) continue;
        if (uf.rank[ri] > maxN) {
            maxN = uf.rank[ri];
            idx = i;
        }
    }
    return idx;
}

int main() {
    vector<vector<int>> graph = {{1,0,0,0,1,0,0,0,0,0,1},{0,1,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,1,0,0,0},{0,1,0,1,0,1,0,0,0,0,0},{1,0,0,0,1,0,0,0,0,0,0},{0,0,0,1,0,1,0,0,1,1,0},{0,0,0,0,0,0,1,1,0,0,0},{0,0,1,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,0,0,1,0,0},{0,0,0,0,0,1,0,0,0,1,0},{1,0,0,0,0,0,0,0,0,0,1}};
    vector<int> initial = {7,8,6,2,3};
    cout << minMalwareSpread(graph, initial) << endl;
}